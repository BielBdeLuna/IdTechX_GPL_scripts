//this file is GPLv3

void ai_bipped::set_pain() {
    float delta_health, current_time;

    old_health = health;
    health = self.getHealth();
    delta_health = delta ( health, old_health );

    AI_ACTIVATE = true;

    sys.println( "$" + self.getKey( "name" ) + ": my health is: " + health );

    current_time = getTime();
    in_pain_time = current_time + 2; //FIXME this is completely arbitrary!
    if ( current_time > next_pain ){
        if ( delta_health > ( max_health / 10 )  ) { //FIXME maybe a tenth is too low?
            decrease_move_speed( true ); // decrease the current speed if the ammount of health lost is a tenth of the total health
        }
        next_pain = current_time + 4;
        // play anim depending on delta_health and health
        animState( ANIMCHANNEL_TORSO, "anim_pain", STANDARD_BLEND_TIME );
    }

    //TODO it would be cool to push the enemy aside by the projectile force
}



void ai_bipped::clear() {
    //terminate any possible active thread
    if ( mat_fx_start_control ) {
		sys.terminate( mat_fx_start_control );
		mat_fx_start_control = 0;
	}
    
    if ( mat_fx_mid_control ) {
		sys.terminate( mat_fx_mid_control );
		mat_fx_mid_control = 0;
	}

    if ( mat_fx_end_control ) {
		sys.terminate( mat_fx_end_control );
		mat_fx_end_control = 0;
	}
}

void ai_bipped::destroy() {
    clear();
}

void ai_bipped::init() {

    //gather spawnargs from the entity

    max_health = self.getHealth();
    health = max_health;

    headEntity = getHead();
    if ( !headEntity ) {        
        HEAD_ATTACHED = true;
    } else {        
        HEAD_ATTACHED = false;
    }

    head_bone = getKey( "head_joint" );
    if ( head_bone == "" ) {
        // since there is no head_bone we consider there is no head, beacuse we can't control it
        HEADLESS = true;
    } else {
        HEADLESS = false;
    }

    //a nullEntity so the monster can look at something, TODO this shouldn't need to be, we have to devise a way to tell the head to look at dirs without this
    nullEntity = sys.spawn( "target_null" );
	nullEntity.bind( self );
	nullEntity.setOrigin( self.getWorldOrigin() );

    Teleports = self.getIntKey( "teleports" );               //so it defaults to not being teleported

    w_full_clip = 32;                                   //32 bullets
    w_current_clip = w_full_clip;
    weapon_strategy = W_IDEAL;       //TODO use binary flags

    attack_flags = 0;
    time_next_attack = 0;

    situational_strategy = "NONE";   //TODO use binary flags

    Hidden = true;
    if ( getIntKey( "hidden" ) <= 0 ) {                 //so it defaults to not being hidden
        Hidden = false;
    }

    Silent = true;
    if ( getIntKey( "silent" ) <= 0 ) {                 //so it defaults to not making ambushes
        Silent = false;
    }

    Patient = true;
    if ( getIntKey( "patient" ) <= 0 ) {                //so it defaults to activate when seeing the player, hearing him, be triggered, or other pulses
        Patient = false;
    }

    no_Hurt_Activate = true;
    if ( getIntKey( " no_hurt_activate" ) <= 0 ) {      //so it defaults to be activated when hurt
         no_Hurt_Activate = false;
    }    

    no_Activate_Feedback = true;
    if ( getIntKey( "no_activate_feedback" ) <= 0 ) {   //so it defaults to making sight animations
        no_Activate_Feedback = false;
    }

    deaf        = getFloatKey( "deaf" ); // distance limit at which he listens, expressed in game units, 0 means it's not deaf at all
    blind       = getFloatKey( "blind" ); // distance limit at which he sees, expressed in game units, 0 means it's not blind at all
    default_fov = getFloatKey( "fov" ); // focal of view of the monster;
    current_fov = default_fov;

    spawn_time = sys.getTime(); // we might not need that

    mat_fx_start_activated = true;
    if ( getIntKey( "mat_fx_start_activated" ) <= 0 ) {   //so it defaults to making the shader effect (if any) when spawned, 
                                                           //this also means it will stay hidden until then
        mat_fx_start_activated = false;
    }

    no_mat_fx_start = true;
    mat_fx_start_time = getFloatKey( "mat_fx_start_time" ); //the time it takes to complete shader effect
    if ( mat_fx_start_time > 0 ) {
        no_mat_fx_start = false;
    }
    

    animation_spawn = getKey( "anim_spawn" );
    animation_sight = getKey( "anim_sight" );
    animation_special = getKey( "anim_special" );
    animation_teleport = getKey( "anim_teleport" );

    in_pain_time = 0;


    // setup the visual apparence of the npc
    
    if ( Teleports || Hidden ) {
        hide();
    } else {
        if ( !no_mat_fx_start ) {
            if ( mat_fx_start_activated ) {
                hide(); // let's hide it until it's time to start the shader effect at activation time
            } else {
                mat_fx_start_control = thread t_mat_fx_start( 0, 0, mat_fx_start_time, 8);
            }
        }

        if ( animation_spawn != "" ) {
            play_custom_animation( animation_spawn, 0, 0, false, true, false, false );
            waitAction( "animation_custom" );
        }
    }

    setNextState( "state_No_Goal" );

        //if he is teleported or hidden - done
            // hide him - done
        //else if we have a spawn animation -done
            // perform the shader effect if it is needed or it's the correct time - done
            // else hide him - done
            //else perform it
                //wait for it to finish         
        
    // go to no goal state

}
